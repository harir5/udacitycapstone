version: 2.1
    orbs:
      aws-eks: circleci/aws-eks@2.2.0
      kubernetes: circleci/kubernetes@1.3
jobs:
  print_hello:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
          
  build-local-app:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
         name: 'install nginx'
         command: |
                  sudo apt-get update -y
                  sudo apt-get install -y nginx
                  sudo apt-get install -y curl
                  curl --version
      - run:
         name: 'build-app-locally'
         command: |
                  sudo cp ./nginx.conf /etc/nginx/nginx.conf
                  sudo cp -r ./www /www
      - run:
         name: 'run-local-app'
         command: |
                  sudo service nginx start
      - run:
         name: 'test-local-app'
         command: |
                  export URL="http://localhost:80"
                  if curl -s ${URL} | grep "Hello"
                  then
                    echo "success"
                  else
                    echo "fail"
                  fi


  install_linters:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: 'install-linters-lint-files'
          command: |
                    sudo apt-get update -y
                    sudo apt-get install -y tidy
                    sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                    sudo chmod +x /bin/hadolint &&\
                    hadolint Dockerfile &&\
                    find . -name '*.html' -type f -print -exec tidy -mq '{}' \;
                  

  build-docker-app:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build files
          command: |
                    docker --version
                    docker build -t udacitycapstone .
                    docker image ls
      - run:
          name: Push app to docker hub
          command: |
                    dockerpath=harihr5/udacitycapstonerepo
                    docker login -u harihr5 --password '$ockerudacity'
                    docker tag udacitycapstone $dockerpath:udacitycapstone
                    docker push $dockerpath:udacitycapstone
                    
  create-eksctl-cluster:
    docker:
      executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: capstonecluster
          skip-kubectl-install: false
          show-eksctl-command: true
          verbose: 3
          node-type: t2.micro
          nodes-max: 2
          ssh-access: true
          ssh-public-key: 'udacity-finalproject.pem'
          
      
jobs:
  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
workflows:
  deployment:
    jobs:
      - aws-eks/create-cluster:
          cluster-name: my-eks-demo
      - test-cluster:
          cluster-name: my-eks-demo
          requires:
            - aws-eks/create-cluster
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
          requires:
            - test-cluster
workflows:
  default:
    jobs:
      - print_hello
      - build-local-app
      - install_linters:
          requires: [build-local-app]
      - build-docker-app:
          requires: [install_linters]
      - create-eksctl-cluster:
          requires: [build-docker-app]
