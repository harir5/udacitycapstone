version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
jobs:
  print_hello:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
          
  build-local-app:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
         name: 'install nginx'
         command: |
                  sudo apt-get update -y
                  sudo apt-get install -y nginx
                  sudo apt-get install -y curl
                  curl --version
      - run:
         name: 'build-app-locally'
         command: |
                  sudo cp ./nginx.conf /etc/nginx/nginx.conf
                  sudo cp -r ./www /www
      - run:
         name: 'run-local-app'
         command: |
                  sudo service nginx start
      - run:
         name: 'test-local-app'
         command: |
                  export URL="http://localhost:80"
                  if curl -s ${URL} | grep "Hello"
                  then
                    echo "success"
                  else
                    echo "fail"
                  fi


  install_linters:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: 'install-linters-lint-files'
          command: |
                    sudo apt-get update -y
                    sudo apt-get install -y tidy
                    sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                    sudo chmod +x /bin/hadolint &&\
                    hadolint Dockerfile &&\
                    find . -name '*.html' -type f -print -exec tidy -mq '{}' \;
                  

  build-docker-app:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build files
          command: |
                    docker --version
                    docker build -t udacitycapstone .
                    docker image ls
      - run:
          name: Push app to docker hub
          command: |
                    dockerpath=harihr5/udacitycapstonerepo
                    docker login -u harihr5 --password '$ockerudacity'
                    docker tag udacitycapstone $dockerpath:udacitycapstone
                    docker push $dockerpath:udacitycapstone
                    
  create-eksctl-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:      
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          aws-region: 'us-east-1'
          zones: 'us-east-1a,us-east-1b'
          skip-kubectl-install: false
          show-eksctl-command: true
          verbose: 3
          node-type: t2.micro
          nodes-max: 2
          external-dns-access:true
          aws-profile : 'udacityiamuser'
          
  deploy_app_in_kubernates:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: 'install-kubectl-and-awscli'
          command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
                    aws --version
                    sudo curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
                    sudo chmod +x ./kubectl
                    mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - run:
          name: 'get kubectl nodes'
          command: |
                  kubectl version --short --client
                  aws eks update-kubeconfig --name udacitycapstonecluster --region us-east-1
                  kubectl get nodes
      - run:
          name: 'deploy to cluster'
          command: |
                  kubectl create deployment udacitycapstone --image=harihr5/udacitycapstonerepo:udacitycapstone
      - run:
          name: 'Check deployments'
          command: |
                  kubectl get deploy,rs,svc,pods
                  kubectl get deployments
                  kubectl config view
                  kubectl expose deployment udacitycapstone --type=LoadBalancer --port=80
                  kubectl get svc udacitycapstone -o json
    
                              
workflows:
  default:
    jobs:
      - print_hello
      - build-local-app
      - install_linters:
          requires: [build-local-app]
      - build-docker-app:
          requires: [install_linters]
      - create-eksctl-cluster:
          cluster-name: udacitycapstonecluster
          requires: [build-docker-app]
      - deploy_app_in_kubernates:
          requires: [create-eksctl-cluster]